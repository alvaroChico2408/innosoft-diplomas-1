from alembic import op
import sqlalchemy as sa
from datetime import datetime
import hashlib

# revision identifiers, used by Alembic.
revision = '225ca9e7a76f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('diploma',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('apellidos', sa.String(length=120), nullable=False),
    sa.Column('nombre', sa.String(length=120), nullable=False),
    sa.Column('uvus', sa.String(length=120), nullable=False),
    sa.Column('correo', sa.String(length=120), nullable=False),
    sa.Column('perfil', sa.String(length=120), nullable=False),
    sa.Column('participacion', sa.String(length=20), nullable=False),
    sa.Column('comite', sa.String(length=255), nullable=True),
    sa.Column('evidencia_aleatoria', sa.Float(), nullable=True),
    sa.Column('horas_de_evidencia_aleatoria', sa.Float(), nullable=True),
    sa.Column('eventos_asistidos', sa.Integer(), nullable=True),
    sa.Column('horas_de_asistencia', sa.Float(), nullable=True),
    sa.Column('reuniones_asistidas', sa.Integer(), nullable=True),
    sa.Column('horas_de_reuniones', sa.Float(), nullable=True),
    sa.Column('bono_de_horas', sa.Float(), nullable=True),
    sa.Column('evidencias_registradas', sa.Integer(), nullable=True),
    sa.Column('horas_de_evidencias', sa.Float(), nullable=True),
    sa.Column('horas_en_total', sa.Float(), nullable=True),
    sa.Column('file_path', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('sent', sa.Boolean(), server_default='0', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('correo'),
    sa.UniqueConstraint('file_path'),
    sa.UniqueConstraint('perfil'),
    sa.UniqueConstraint('uvus')
    )
    op.create_table('diploma_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=100), nullable=False),
    sa.Column('custom_text', sa.String(length=500), nullable=False),
    sa.Column('file_path', sa.String(length=200), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('filename')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=256), nullable=True),
    sa.Column('password', sa.String(length=256), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('user_profile',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('surname', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=256), nullable=True),
    sa.Column('password', sa.String(length=256), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('user_id')
    )

    # Inserta un usuario inicial
    connection = op.get_bind()
    password = "password"
    hashed_password = hashlib.sha256(password.encode()).hexdigest()

    # Insertar usuario en la tabla user
    connection.execute(
        sa.text(
            "INSERT INTO user (email, password, created_at, active) VALUES (:email, :password, :created_at, :active)"
        ),
        {
            "email": "user1@example.com",
            "password": hashed_password,
            "created_at": datetime.utcnow(),
            "active": True
        }
    )

    # Obtener el ID del usuario recién creado
    user_id = connection.execute(
        sa.text("SELECT id FROM user WHERE email = :email"),
        {"email": "user1@example.com"}
    ).scalar()

    # Insertar el perfil asociado para el usuario
    connection.execute(
        sa.text(
            "INSERT INTO user_profile (user_id, name, surname, email, password) VALUES (:user_id, :name, :surname, :email, :password)"
        ),
        {
            "user_id": user_id,
            "name": "Default",
            "surname": "User",
            "email": "user1@example.com",
            "password": hashed_password
        }
    )
    # Inserta un registro en la tabla 'diploma_templates'
    connection = op.get_bind()
    template_text = "¡Enhorabuena [nombre] [apellidos], has participado en las jornadas de Innosoft 2024 como [participacion]!"

    # Insertar el template en la tabla diploma_templates
    connection.execute(
        sa.text(
            "INSERT INTO diploma_templates (filename, custom_text, file_path) "
            "VALUES (:filename, :custom_text, :file_path)"
        ),
        {
            "filename": "Plantilla diploma.pdf",
            "custom_text": template_text,
            "file_path": "docs/plantillas/Plantilla diploma.pdf"
        }
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_profile')
    op.drop_table('user')
    op.drop_table('diploma_templates')
    op.drop_table('diploma')
    # ### end Alembic commands ###
